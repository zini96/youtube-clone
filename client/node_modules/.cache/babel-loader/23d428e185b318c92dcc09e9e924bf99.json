{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from \"react\";\nimport { ActiveDescendantContextProvider } from \"./activeDescendantContext\";\n/**\n * This component should be used with the {@link KeyboardMovementProvider}\n * component to implement custom keyboard focusable behavior using\n * `aria-activedescendant`.\n *\n * @example\n * Base Example\n * ```tsx\n * function Descendant({ id, children, ...props }: HTMLAttributes<HTMLDivElement>): ReactElement {\n *   const { ref, active } = useActiveDescendant({ id });\n *   return (\n *     <div\n *       {...props}\n *       id={id}\n *       ref={ref}\n *       role=\"option\"\n *       tabIndex={-1}\n *       className={active ? \"active\" : undefined}\n *     >\n *       {children}\n *     </div>\n *   );\n * }\n *\n * function CustomFocus(): ReactElement {\n *   const { providerProps, focusIndex, ...containerProps } =\n *     useActiveDescendantFocus()\n *\n *   return (\n *     <ActiveDescendantMovementProvider>\n *       <div\n *         {...containerProps}\n *         id=\"some-unique-id\"\n *         role=\"listbox\"\n *         tabIndex={0}\n *       >\n *         <Descendant id=\"some-descendant-id\">\n *           Some Option\n *         </Descendant>\n *       </div>\n *      </ActiveDescendantMovementProvider>\n *   );\n * }\n *\n * function Example() {\n *   return (\n *     <KeyboardMovementProvider loopable searchable>\n *       <CustomFocus />\n *     </KeyboardMovementProvider>\n *   );\n * }\n * ```\n *\n * @see https://www.w3.org/TR/wai-aria-practices/#kbd_focus_activedescendant\n * @internal\n * @remarks \\@since 5.0.0\n */\n\nexport function ActiveDescendantMovementProvider(_a) {\n  var children = _a.children,\n      activeId = _a.activeId,\n      setActiveId = _a.setActiveId;\n  return _jsx(ActiveDescendantContextProvider, __assign({\n    value: useMemo(function () {\n      return {\n        activeId: activeId,\n        setActiveId: setActiveId\n      };\n    }, [activeId, setActiveId])\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"sources":["../../src/keyboardMovement/ActiveDescendantMovementProvider.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,SAAS,OAAT,QAAwB,OAAxB;AAEA,SAAS,+BAAT,QAAgD,2BAAhD;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAM,SAAU,gCAAV,CAA2C,EAA3C,EAIkC;MAHtC,QAAQ,GAAA,EAAA,CAAA,Q;MACR,QAAQ,GAAA,EAAA,CAAA,Q;MACR,WAAW,GAAA,EAAA,CAAA,W;AAEX,SACE,IAAA,CAAC,+BAAD,EAAgC,QAAA,CAAA;AAC9B,IAAA,KAAK,EAAE,OAAO,CACZ,YAAA;AAAM,aAAC;AACL,QAAA,QAAQ,EAAA,QADH;AAEL,QAAA,WAAW,EAAA;AAFN,OAAD;AAGJ,KAJU,EAKZ,CAAC,QAAD,EAAW,WAAX,CALY;AADgB,GAAA,EAO7B;AAAA,IAAA,QAAA,EAEA;AAFA,GAP6B,CAAhC,CADF;AAaD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from \"react\";\nimport { ActiveDescendantContextProvider } from \"./activeDescendantContext\";\n/**\n * This component should be used with the {@link KeyboardMovementProvider}\n * component to implement custom keyboard focusable behavior using\n * `aria-activedescendant`.\n *\n * @example\n * Base Example\n * ```tsx\n * function Descendant({ id, children, ...props }: HTMLAttributes<HTMLDivElement>): ReactElement {\n *   const { ref, active } = useActiveDescendant({ id });\n *   return (\n *     <div\n *       {...props}\n *       id={id}\n *       ref={ref}\n *       role=\"option\"\n *       tabIndex={-1}\n *       className={active ? \"active\" : undefined}\n *     >\n *       {children}\n *     </div>\n *   );\n * }\n *\n * function CustomFocus(): ReactElement {\n *   const { providerProps, focusIndex, ...containerProps } =\n *     useActiveDescendantFocus()\n *\n *   return (\n *     <ActiveDescendantMovementProvider>\n *       <div\n *         {...containerProps}\n *         id=\"some-unique-id\"\n *         role=\"listbox\"\n *         tabIndex={0}\n *       >\n *         <Descendant id=\"some-descendant-id\">\n *           Some Option\n *         </Descendant>\n *       </div>\n *      </ActiveDescendantMovementProvider>\n *   );\n * }\n *\n * function Example() {\n *   return (\n *     <KeyboardMovementProvider loopable searchable>\n *       <CustomFocus />\n *     </KeyboardMovementProvider>\n *   );\n * }\n * ```\n *\n * @see https://www.w3.org/TR/wai-aria-practices/#kbd_focus_activedescendant\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport function ActiveDescendantMovementProvider(_a) {\n    var children = _a.children, activeId = _a.activeId, setActiveId = _a.setActiveId;\n    return (_jsx(ActiveDescendantContextProvider, __assign({ value: useMemo(function () { return ({\n            activeId: activeId,\n            setActiveId: setActiveId,\n        }); }, [activeId, setActiveId]) }, { children: children })));\n}\n//# sourceMappingURL=ActiveDescendantMovementProvider.js.map"]},"metadata":{},"sourceType":"module"}