{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useMemo } from \"react\";\nimport { useTempValue } from \"../useTempValue\";\nimport { findMatchIndex as DEFAULT_FIND_MATCH_INDEX } from \"./findMatchIndex\";\nimport { DEFAULT_GET_ITEM_VALUE, DEFAULT_SEARCH_RESET_TIME, DEFAULT_VALUE_KEY } from \"./utils\";\n/**\n * Adds the accessibility functionality to search a list of items as the user\n * types to trigger `aria-activedescendant` focus or manual DOM focus events.\n */\n\nexport function useKeyboardSearch(_a) {\n  var items = _a.items,\n      onChange = _a.onChange,\n      onKeyDown = _a.onKeyDown,\n      _b = _a.resetTime,\n      resetTime = _b === void 0 ? DEFAULT_SEARCH_RESET_TIME : _b,\n      searchIndex = _a.searchIndex,\n      _c = _a.valueKey,\n      valueKey = _c === void 0 ? DEFAULT_VALUE_KEY : _c,\n      _d = _a.getItemValue,\n      getItemValue = _d === void 0 ? DEFAULT_GET_ITEM_VALUE : _d,\n      _e = _a.findMatchIndex,\n      findMatchIndex = _e === void 0 ? DEFAULT_FIND_MATCH_INDEX : _e;\n\n  var _f = __read(useTempValue(\"\", resetTime), 2),\n      value = _f[0],\n      setValue = _f[1];\n\n  var values = useMemo(function () {\n    return items.map(function (item) {\n      return getItemValue(item, valueKey);\n    });\n  }, [items, getItemValue, valueKey]);\n  var handleKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    var key = event.key,\n        altKey = event.altKey,\n        ctrlKey = event.ctrlKey,\n        metaKey = event.metaKey;\n\n    if (altKey || ctrlKey || metaKey || key.length > 1 || !value.current && key === \" \") {\n      // might need to change this later if other languages have non-meta keys\n      // that are more than 1 letter\n      return;\n    }\n\n    var nextValue = key;\n\n    if (value.current !== key) {\n      nextValue = \"\".concat(value.current).concat(key);\n    }\n\n    setValue(nextValue);\n    var index = findMatchIndex(nextValue, values, searchIndex, true); // don't want to trigger change events if the search didn't match anything\n    // since you normally don't really care about failed matches\n\n    if (index === searchIndex || index === -1) {\n      return;\n    }\n\n    var data = {\n      index: index,\n      item: items[index],\n      items: items,\n      query: nextValue,\n      target: event.currentTarget\n    };\n    onChange(data);\n  }, [searchIndex, findMatchIndex, items, onChange, onKeyDown, setValue, value, values]);\n  return handleKeyDown;\n}","map":{"version":3,"sources":["../../src/search/useKeyboardSearch.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useCallback, useMemo } from \"react\";\nimport { useTempValue } from \"../useTempValue\";\nimport { findMatchIndex as DEFAULT_FIND_MATCH_INDEX } from \"./findMatchIndex\";\nimport { DEFAULT_GET_ITEM_VALUE, DEFAULT_SEARCH_RESET_TIME, DEFAULT_VALUE_KEY, } from \"./utils\";\n/**\n * Adds the accessibility functionality to search a list of items as the user\n * types to trigger `aria-activedescendant` focus or manual DOM focus events.\n */\nexport function useKeyboardSearch(_a) {\n    var items = _a.items, onChange = _a.onChange, onKeyDown = _a.onKeyDown, _b = _a.resetTime, resetTime = _b === void 0 ? DEFAULT_SEARCH_RESET_TIME : _b, searchIndex = _a.searchIndex, _c = _a.valueKey, valueKey = _c === void 0 ? DEFAULT_VALUE_KEY : _c, _d = _a.getItemValue, getItemValue = _d === void 0 ? DEFAULT_GET_ITEM_VALUE : _d, _e = _a.findMatchIndex, findMatchIndex = _e === void 0 ? DEFAULT_FIND_MATCH_INDEX : _e;\n    var _f = __read(useTempValue(\"\", resetTime), 2), value = _f[0], setValue = _f[1];\n    var values = useMemo(function () { return items.map(function (item) { return getItemValue(item, valueKey); }); }, [items, getItemValue, valueKey]);\n    var handleKeyDown = useCallback(function (event) {\n        if (onKeyDown) {\n            onKeyDown(event);\n        }\n        var key = event.key, altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey;\n        if (altKey ||\n            ctrlKey ||\n            metaKey ||\n            key.length > 1 ||\n            (!value.current && key === \" \")) {\n            // might need to change this later if other languages have non-meta keys\n            // that are more than 1 letter\n            return;\n        }\n        var nextValue = key;\n        if (value.current !== key) {\n            nextValue = \"\".concat(value.current).concat(key);\n        }\n        setValue(nextValue);\n        var index = findMatchIndex(nextValue, values, searchIndex, true);\n        // don't want to trigger change events if the search didn't match anything\n        // since you normally don't really care about failed matches\n        if (index === searchIndex || index === -1) {\n            return;\n        }\n        var data = {\n            index: index,\n            item: items[index],\n            items: items,\n            query: nextValue,\n            target: event.currentTarget,\n        };\n        onChange(data);\n    }, [\n        searchIndex,\n        findMatchIndex,\n        items,\n        onChange,\n        onKeyDown,\n        setValue,\n        value,\n        values,\n    ]);\n    return handleKeyDown;\n}\n//# sourceMappingURL=useKeyboardSearch.js.map"]},"metadata":{},"sourceType":"module"}