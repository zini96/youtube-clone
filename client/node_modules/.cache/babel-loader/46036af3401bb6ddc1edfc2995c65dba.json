{"ast":null,"code":"var _jsxFileName = \"D:\\\\boilerplate-mern-stack-master\\\\client\\\\src\\\\components\\\\views\\\\VideoDetailPage\\\\Section\\\\Comment.js\";\nimport Axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport SingleComment from './SingleComment';\nimport ReplyComment from './ReplyComment';\nimport { Avatar } from 'antd';\n\nfunction Comment(props) {\n  const user = useSelector(state => state.user);\n  const [Visible, setVisible] = useState(false);\n  const [commentValue, setCommentValue] = useState(\"\");\n  const [CommentNumber, setCommentNumber] = useState(0);\n  useEffect(() => {\n    setCommentNumber(props.commentLists.length);\n  }, [props.commentLists]);\n\n  const handleClick = event => {\n    setCommentValue(event.currentTarget.value);\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const variables = {\n      content: commentValue,\n      writer: user.userData._id,\n      postId: props.postId\n    };\n    Axios.post('/api/comment/saveComment', variables).then(response => {\n      if (response.data.success) {\n        console.log(response.data.result);\n        setCommentValue(\"\"); //초기화\n\n        props.refreshFunction(response.data.result); //save한 comment의 정보를 부모 component에서 받을 수 있게!\n      } else {\n        alert('코멘트 등록에 실패했습니다.');\n      }\n    });\n  };\n\n  const CommentList = props.commentLists && props.commentLists.map((comment, index) => !comment.responseTo && /*#__PURE__*/React.createElement(React.Fragment, {\n    key: comment._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SingleComment, {\n    comment: comment,\n    postId: props.postId,\n    refreshFunction: props.refreshFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(ReplyComment, {\n    parentCommentId: comment._id,\n    commentLists: props.commentLists,\n    postId: props.postId,\n    refreshFunction: props.refreshFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '1.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontWeight: '700',\n      marginLeft: '0.5rem',\n      marginBottom: '1rem',\n      cursor: 'pointer'\n    },\n    onClick: () => {\n      setVisible(!Visible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"\\uB313\\uAE00(\", CommentNumber, \")\"), /*#__PURE__*/React.createElement(\"hr\", {\n    style: {\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), Visible && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '10%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      height: '58px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    src: props.avatar,\n    alt: \"avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginBottom: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, props.name)), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"commentForm\",\n    style: {\n      width: '100%'\n    },\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"commentInput\",\n    onChange: handleClick,\n    value: commentValue,\n    placeholder: \"\\uCF54\\uBA58\\uD2B8\\uB97C \\uC791\\uC131\\uD574 \\uC8FC\\uC138\\uC694\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"commentBtn\",\n    style: {\n      width: '15%'\n    },\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"hr\", {\n    style: {\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }), props.commentLists && props.commentLists.map((comment, index) => !comment.responseTo && /*#__PURE__*/React.createElement(React.Fragment, {\n    key: comment._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(SingleComment, {\n    comment: comment,\n    postId: props.postId,\n    refreshFunction: props.refreshFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(ReplyComment, {\n    parentCommentId: comment._id,\n    commentLists: props.commentLists,\n    postId: props.postId,\n    refreshFunction: props.refreshFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 33\n    }\n  })))));\n}\n\nexport default Comment;","map":{"version":3,"sources":["D:/boilerplate-mern-stack-master/client/src/components/views/VideoDetailPage/Section/Comment.js"],"names":["Axios","React","useState","useEffect","useSelector","SingleComment","ReplyComment","Avatar","Comment","props","user","state","Visible","setVisible","commentValue","setCommentValue","CommentNumber","setCommentNumber","commentLists","length","handleClick","event","currentTarget","value","onSubmit","preventDefault","variables","content","writer","userData","_id","postId","post","then","response","data","success","console","log","result","refreshFunction","alert","CommentList","map","comment","index","responseTo","marginTop","fontWeight","marginLeft","marginBottom","cursor","display","height","width","flexDirection","alignItems","avatar","name"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport React,{useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux'\r\nimport SingleComment from './SingleComment';\r\nimport ReplyComment from './ReplyComment';\r\nimport {Avatar} from 'antd';\r\n\r\nfunction Comment(props) {\r\n    const user = useSelector(state => state.user);\r\n    const [Visible, setVisible] = useState(false);\r\n    const [commentValue, setCommentValue] = useState(\"\")\r\n    const [CommentNumber, setCommentNumber] = useState(0)\r\n\r\n    useEffect(()=>{\r\n        setCommentNumber(props.commentLists.length)\r\n    },[props.commentLists])\r\n\r\n    const handleClick = (event)=>{\r\n        setCommentValue(event.currentTarget.value)\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const variables = {\r\n            content: commentValue,\r\n            writer: user.userData._id,\r\n            postId: props.postId\r\n        }\r\n\r\n        Axios.post('/api/comment/saveComment', variables)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log(response.data.result)\r\n                    setCommentValue(\"\") //초기화\r\n                    props.refreshFunction(response.data.result) //save한 comment의 정보를 부모 component에서 받을 수 있게!\r\n                } else {\r\n                    alert('코멘트 등록에 실패했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n    const CommentList = \r\n        props.commentLists && props.commentLists.map((comment, index)=>(\r\n            (!comment.responseTo && \r\n                <React.Fragment  key={comment._id}>\r\n                    <SingleComment comment={comment} postId={props.postId} refreshFunction={props.refreshFunction} />\r\n                    <ReplyComment parentCommentId={comment._id} commentLists={props.commentLists} postId={props.postId} refreshFunction={props.refreshFunction}/>\r\n                </React.Fragment>\r\n            )\r\n        ))\r\n\r\n\r\n    return (\r\n        <div style={{marginTop:'1.5rem'}}>\r\n            <br/>\r\n            <p style={{fontWeight:'700', marginLeft:'0.5rem',marginBottom:'1rem', cursor:'pointer'}} onClick={()=> {setVisible(!Visible)}}>댓글({CommentNumber})</p>\r\n            <hr style={{marginBottom:'1rem'}}/>\r\n            {Visible &&\r\n                <div>\r\n                    <div style={{ display: 'flex', height: '100%' }}>\r\n                        <div style={{ width: '10%', display: 'flex', flexDirection: 'column', alignItems: 'center', height: '58px' }}>\r\n                            <Avatar src={props.avatar} alt=\"avatar\" />\r\n                            <p style={{ marginBottom: '0' }}>{props.name}</p>\r\n                        </div>\r\n\r\n                        {/* Root Comment Form */}\r\n                        <form className='commentForm' style={{ width: '100%' }} onSubmit={onSubmit} >\r\n                            <textarea\r\n                                className='commentInput'\r\n                                onChange={handleClick}\r\n                                value={commentValue}\r\n                                placeholder=\"코멘트를 작성해 주세요\"\r\n                            />\r\n\r\n                            <button className='commentBtn' style={{ width: '15%' }} onClick={onSubmit}>Submit</button>\r\n                        </form>\r\n                    </div>\r\n\r\n                    {/* Comment Lists */}\r\n                    <hr style={{marginTop:'1rem'}}/>\r\n\r\n                    {props.commentLists && props.commentLists.map((comment, index) => (\r\n                        (!comment.responseTo &&\r\n                            <React.Fragment key={comment._id}>\r\n                                <SingleComment comment={comment} postId={props.postId} refreshFunction={props.refreshFunction} />\r\n                                <ReplyComment parentCommentId={comment._id} commentLists={props.commentLists} postId={props.postId} refreshFunction={props.refreshFunction} />\r\n                            </React.Fragment>\r\n                        )\r\n                    ))}\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Comment;"]},"metadata":{},"sourceType":"module"}