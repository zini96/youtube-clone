{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from \"react\";\n/**\n * This hook can be used to implement simple drag-and-drop behavior for file\n * uploads or special styles while dragging an element over a part of a page.\n *\n * @example\n * Simple File\n * ```ts\n * const style: CSSProperties = {\n *   border: '1px solid blue',\n * };\n *\n * function Example(): ReactElement {\n *   const { onDrop } = useFileUpload()\n *   const [isOver, handlers] = useDropzone({\n *     onDrop: (event) => {\n *       // normally use the `onDrop` behavior from `useFileUpload` to upload\n *       // files:\n *       // onDrop(event);\n *     }\n *   });\n *\n *   return (\n *     <div {...handlers} style={isOver ? style : {}}>\n *       Drag and drop some files!\n *       {isOver && <UploadSVGIcon />}\n *     </div>\n *   );\n * }\n * ```\n *\n * @see {@link useFileUpload} for a more complex example\n * @param options - The {@link DropzoneHandlers} that can be merged with the\n * default functionality.\n * @returns the {@link DropzoneHookReturnValue}\n * @remarks \\@since 2.9.0\n */\n\nexport function useDropzone(options) {\n  var propOnDragEnter = options.onDragEnter,\n      propOnDragOver = options.onDragOver,\n      propOnDragLeave = options.onDragLeave,\n      propOnDrop = options.onDrop;\n\n  var _a = __read(useState(false), 2),\n      isOver = _a[0],\n      setOver = _a[1];\n\n  var onDragOver = useCallback(function (event) {\n    propOnDragOver === null || propOnDragOver === void 0 ? void 0 : propOnDragOver(event);\n    event.preventDefault();\n    event.stopPropagation();\n    setOver(true);\n  }, [propOnDragOver]);\n  var onDragEnter = useCallback(function (event) {\n    propOnDragEnter === null || propOnDragEnter === void 0 ? void 0 : propOnDragEnter(event);\n    event.preventDefault();\n    event.stopPropagation();\n    setOver(true);\n  }, [propOnDragEnter]);\n  var onDrop = useCallback(function (event) {\n    propOnDrop === null || propOnDrop === void 0 ? void 0 : propOnDrop(event);\n    event.preventDefault();\n    event.stopPropagation();\n    setOver(false);\n  }, [propOnDrop]);\n  var onDragLeave = useCallback(function (event) {\n    propOnDragLeave === null || propOnDragLeave === void 0 ? void 0 : propOnDragLeave(event);\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (!event.target || event.currentTarget === event.target || !event.currentTarget.contains(event.target)) {\n      setOver(false);\n    }\n  }, [propOnDragLeave]);\n  return [isOver, {\n    onDragOver: onDragOver,\n    onDragEnter: onDragEnter,\n    onDrop: onDrop,\n    onDragLeave: onDragLeave\n  }];\n}","map":{"version":3,"sources":["../src/useDropzone.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,OAAM,SAAU,WAAV,CACJ,OADI,EACwB;AAG1B,MAAa,eAAe,GAI1B,OAAO,CAJmB,WAA5B;AAAA,MACY,cAAc,GAGxB,OAAO,CAHiB,UAD1B;AAAA,MAEa,eAAe,GAE1B,OAAO,CAFmB,WAF5B;AAAA,MAGQ,UAAU,GAChB,OAAO,CADS,MAHlB;;AAKI,MAAA,EAAA,GAAA,MAAA,CAAoB,QAAQ,CAAC,KAAD,CAA5B,EAAmC,CAAnC,CAAA;AAAA,MAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP;AAAA,MAAS,OAAO,GAAA,EAAA,CAAA,CAAA,CAAhB;;AAEN,MAAM,UAAU,GAAG,WAAW,CAC5B,UAAC,KAAD,EAAoB;AAClB,IAAA,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAG,KAAH,CAAd;AACA,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,KAAK,CAAC,eAAN;AACA,IAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAN2B,EAO5B,CAAC,cAAD,CAP4B,CAA9B;AASA,MAAM,WAAW,GAAG,WAAW,CAC7B,UAAC,KAAD,EAAoB;AAClB,IAAA,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAG,KAAH,CAAf;AACA,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,KAAK,CAAC,eAAN;AACA,IAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAN4B,EAO7B,CAAC,eAAD,CAP6B,CAA/B;AASA,MAAM,MAAM,GAAG,WAAW,CACxB,UAAC,KAAD,EAAoB;AAClB,IAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAG,KAAH,CAAV;AACA,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,KAAK,CAAC,eAAN;AACA,IAAA,OAAO,CAAC,KAAD,CAAP;AACD,GANuB,EAOxB,CAAC,UAAD,CAPwB,CAA1B;AASA,MAAM,WAAW,GAAG,WAAW,CAC7B,UAAC,KAAD,EAAoB;AAClB,IAAA,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAG,KAAH,CAAf;AACA,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,KAAK,CAAC,eAAN;;AAEA,QACE,CAAC,KAAK,CAAC,MAAP,IACA,KAAK,CAAC,aAAN,KAAwB,KAAK,CAAC,MAD9B,IAEA,CAAC,KAAK,CAAC,aAAN,CAAoB,QAApB,CAA6B,KAAK,CAAC,MAAnC,CAHH,EAIE;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GAb4B,EAc7B,CAAC,eAAD,CAd6B,CAA/B;AAiBA,SAAO,CACL,MADK,EAEL;AACE,IAAA,UAAU,EAAA,UADZ;AAEE,IAAA,WAAW,EAAA,WAFb;AAGE,IAAA,MAAM,EAAA,MAHR;AAIE,IAAA,WAAW,EAAA;AAJb,GAFK,CAAP;AASD","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useCallback, useState } from \"react\";\n/**\n * This hook can be used to implement simple drag-and-drop behavior for file\n * uploads or special styles while dragging an element over a part of a page.\n *\n * @example\n * Simple File\n * ```ts\n * const style: CSSProperties = {\n *   border: '1px solid blue',\n * };\n *\n * function Example(): ReactElement {\n *   const { onDrop } = useFileUpload()\n *   const [isOver, handlers] = useDropzone({\n *     onDrop: (event) => {\n *       // normally use the `onDrop` behavior from `useFileUpload` to upload\n *       // files:\n *       // onDrop(event);\n *     }\n *   });\n *\n *   return (\n *     <div {...handlers} style={isOver ? style : {}}>\n *       Drag and drop some files!\n *       {isOver && <UploadSVGIcon />}\n *     </div>\n *   );\n * }\n * ```\n *\n * @see {@link useFileUpload} for a more complex example\n * @param options - The {@link DropzoneHandlers} that can be merged with the\n * default functionality.\n * @returns the {@link DropzoneHookReturnValue}\n * @remarks \\@since 2.9.0\n */\nexport function useDropzone(options) {\n    var propOnDragEnter = options.onDragEnter, propOnDragOver = options.onDragOver, propOnDragLeave = options.onDragLeave, propOnDrop = options.onDrop;\n    var _a = __read(useState(false), 2), isOver = _a[0], setOver = _a[1];\n    var onDragOver = useCallback(function (event) {\n        propOnDragOver === null || propOnDragOver === void 0 ? void 0 : propOnDragOver(event);\n        event.preventDefault();\n        event.stopPropagation();\n        setOver(true);\n    }, [propOnDragOver]);\n    var onDragEnter = useCallback(function (event) {\n        propOnDragEnter === null || propOnDragEnter === void 0 ? void 0 : propOnDragEnter(event);\n        event.preventDefault();\n        event.stopPropagation();\n        setOver(true);\n    }, [propOnDragEnter]);\n    var onDrop = useCallback(function (event) {\n        propOnDrop === null || propOnDrop === void 0 ? void 0 : propOnDrop(event);\n        event.preventDefault();\n        event.stopPropagation();\n        setOver(false);\n    }, [propOnDrop]);\n    var onDragLeave = useCallback(function (event) {\n        propOnDragLeave === null || propOnDragLeave === void 0 ? void 0 : propOnDragLeave(event);\n        event.preventDefault();\n        event.stopPropagation();\n        if (!event.target ||\n            event.currentTarget === event.target ||\n            !event.currentTarget.contains(event.target)) {\n            setOver(false);\n        }\n    }, [propOnDragLeave]);\n    return [\n        isOver,\n        {\n            onDragOver: onDragOver,\n            onDragEnter: onDragEnter,\n            onDrop: onDrop,\n            onDragLeave: onDragLeave,\n        },\n    ];\n}\n//# sourceMappingURL=useDropzone.js.map"]},"metadata":{},"sourceType":"module"}