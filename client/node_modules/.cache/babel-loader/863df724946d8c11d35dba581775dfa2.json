{"ast":null,"code":"var _jsxFileName = \"D:\\\\boilerplate-mern-stack-master\\\\client\\\\src\\\\components\\\\views\\\\VideoDetailPage\\\\Section\\\\SingleComment.js\";\nimport React, { useState } from 'react';\nimport { Comment, Avatar, Button, Input } from 'antd';\nimport Axios from 'axios';\nimport { useSelector } from 'react-redux';\nconst {\n  TextArea\n} = Input;\n\nfunction SingleComment(props) {\n  const [OpenReply, setOpenReply] = useState(false);\n  const [CommentValue, setCommentValue] = useState(\"\");\n  const user = useSelector(state => state.user);\n\n  const onClickReplyOpen = () => {\n    setOpenReply(!OpenReply);\n  };\n\n  const actions = [/*#__PURE__*/React.createElement(\"span\", {\n    onClick: onClickReplyOpen,\n    key: \"comment-basic-reply-to\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, \"Reply to\")];\n\n  const onHandleChange = e => {\n    setCommentValue(e.currentTarget.CommentValue);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const variables = {\n      content: CommentValue,\n      writer: user.userData._id,\n      postId: props.postId,\n      responseTo: props.comment._id\n    };\n    Axios.post('/api/comment/saveComment', variables).then(response => {\n      if (response.data.success) {\n        console.log(response.data.result);\n        setCommentValue(\"\");\n        setOpenReply(false);\n        props.refreshFunction(response.data.result);\n      } else {\n        alert('코멘트 등록에 실패했습니다.');\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, props.comment.writer && /*#__PURE__*/React.createElement(Comment, {\n    actions: actions,\n    author: props.comment.writer.name,\n    avatar: /*#__PURE__*/React.createElement(Avatar, {\n      src: props.comment.writer.image,\n      alt: \"avatar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 29\n      }\n    }),\n    content: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 30\n      }\n    }, props.comment.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }), OpenReply && /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      display: 'flex'\n    },\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    style: {\n      width: '100%',\n      borderRadius: '5px'\n    },\n    onChange: onHandleChange,\n    value: CommentValue,\n    placeholder: \"\\uCF54\\uBA58\\uD2B8\\uB97C \\uC791\\uC131\\uD574 \\uC8FC\\uC138\\uC694\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      width: '20%',\n      height: '52px'\n    },\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, \"Submit\")));\n}\n\nexport default SingleComment;","map":{"version":3,"sources":["D:/boilerplate-mern-stack-master/client/src/components/views/VideoDetailPage/Section/SingleComment.js"],"names":["React","useState","Comment","Avatar","Button","Input","Axios","useSelector","TextArea","SingleComment","props","OpenReply","setOpenReply","CommentValue","setCommentValue","user","state","onClickReplyOpen","actions","onHandleChange","e","currentTarget","onSubmit","preventDefault","variables","content","writer","userData","_id","postId","responseTo","comment","post","then","response","data","success","console","log","result","refreshFunction","alert","name","image","display","width","borderRadius","height"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport {Comment, Avatar, Button, Input} from 'antd';\r\nimport Axios from 'axios';\r\nimport {useSelector} from 'react-redux'\r\n\r\n\r\nconst {TextArea} = Input;\r\n\r\nfunction SingleComment(props) {\r\n    const [OpenReply, setOpenReply] = useState(false)\r\n    const [CommentValue, setCommentValue] = useState(\"\")\r\n\r\n    const user = useSelector(state => state.user);\r\n\r\n\r\n    const onClickReplyOpen = ()=>{\r\n        setOpenReply(!OpenReply)\r\n    }\r\n\r\n    const actions = [\r\n        <span onClick={onClickReplyOpen} key=\"comment-basic-reply-to\">Reply to</span>\r\n    ]\r\n\r\n    const onHandleChange = (e)=>{\r\n        setCommentValue(e.currentTarget.CommentValue)\r\n    }\r\n\r\n    const onSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        const variables = {\r\n            content: CommentValue,\r\n            writer: user.userData._id,\r\n            postId: props.postId,\r\n            responseTo: props.comment._id\r\n        }\r\n\r\n        Axios.post('/api/comment/saveComment', variables)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log(response.data.result)\r\n                    setCommentValue(\"\")\r\n                    setOpenReply(false)\r\n                    props.refreshFunction(response.data.result)\r\n                } else {\r\n                    alert('코멘트 등록에 실패했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.comment.writer &&\r\n                <Comment\r\n                    actions={actions}\r\n                    author={props.comment.writer.name}\r\n                    avatar={<Avatar src={props.comment.writer.image} alt=\"avatar\" />}\r\n                    content={<p>{props.comment.content}</p>}\r\n                />\r\n            }\r\n            {OpenReply &&\r\n                <form style={{ display: 'flex' }} onSubmit={onSubmit}>\r\n                    <textarea\r\n                        style={{ width: '100%', borderRadius: '5px' }}\r\n                        onChange={onHandleChange}\r\n                        value={CommentValue}\r\n                        placeholder=\"코멘트를 작성해 주세요\"\r\n                    />\r\n                    <br />\r\n                    <button style={{ width: '20%', height: '52px' }} onClick={onSubmit}>Submit</button>\r\n                </form>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleComment;"]},"metadata":{},"sourceType":"module"}