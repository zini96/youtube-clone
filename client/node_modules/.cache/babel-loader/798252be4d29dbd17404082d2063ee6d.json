{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport { FontIcon } from \"./FontIcon\";\nvar DEFAULT_ICONS = {\n  back: _jsx(FontIcon, {\n    children: \"keyboard_arrow_left\"\n  }),\n  checkbox: _jsx(FontIcon, {\n    children: \"check_box\"\n  }),\n  upload: _jsx(FontIcon, {\n    children: \"file_upload\"\n  }),\n  dropdown: _jsx(FontIcon, {\n    children: \"arrow_drop_down\"\n  }),\n  error: _jsx(FontIcon, {\n    children: \"error_outline\"\n  }),\n  expander: _jsx(FontIcon, {\n    children: \"keyboard_arrow_down\"\n  }),\n  forward: _jsx(FontIcon, {\n    children: \"keyboard_arrow_right\"\n  }),\n  menu: _jsx(FontIcon, {\n    children: \"menu\"\n  }),\n  notification: _jsx(FontIcon, {\n    children: \"notifications\"\n  }),\n  password: _jsx(FontIcon, {\n    children: \"remove_red_eye\"\n  }),\n  radio: _jsx(FontIcon, {\n    children: \"radio_button_checked\"\n  }),\n  selected: _jsx(FontIcon, {\n    children: \"check\"\n  }),\n  sort: _jsx(FontIcon, {\n    children: \"arrow_upward\"\n  })\n};\nvar context = createContext(DEFAULT_ICONS);\nvar Provider = context.Provider;\n/**\n * Gets one of the configured icons from the `IconProvider`. This is probably\n * just for use within `react-md`, but might be helpful outside if you want to\n * reuse the existing icon configuration for other custom components.\n *\n * If te second argument is provided and it is not `undefined`, that value will\n * be used instead of the inherited icon type.\n *\n * @param name - The name of the icon you want to use.\n * @param override - An optional override to use instead of the inherited icon.\n * @returns The overridden icon value or the inherited icon.\n */\n\nexport function useIcon(name, override) {\n  var icons = useContext(context);\n\n  if (typeof override !== \"undefined\") {\n    return override;\n  }\n\n  return icons[name];\n}\n/**\n * The `IconProvider` component is used to override all the default icons within\n * `react-md` with a newly defined set of icons. This is super nice since you\n * won't need to create new component wrappers for all the components within\n * `react-md` if you want to switch to SVG icons instead of the default font\n * icons.\n */\n\nexport function IconProvider(_a) {\n  var children = _a.children,\n      _b = _a.back,\n      back = _b === void 0 ? DEFAULT_ICONS.back : _b,\n      _c = _a.checkbox,\n      checkbox = _c === void 0 ? DEFAULT_ICONS.checkbox : _c,\n      _d = _a.dropdown,\n      dropdown = _d === void 0 ? DEFAULT_ICONS.dropdown : _d,\n      _e = _a.expander,\n      expander = _e === void 0 ? DEFAULT_ICONS.expander : _e,\n      _f = _a.error,\n      error = _f === void 0 ? DEFAULT_ICONS.error : _f,\n      _g = _a.forward,\n      forward = _g === void 0 ? DEFAULT_ICONS.forward : _g,\n      _h = _a.menu,\n      menu = _h === void 0 ? DEFAULT_ICONS.menu : _h,\n      _j = _a.notification,\n      notification = _j === void 0 ? DEFAULT_ICONS.notification : _j,\n      _k = _a.password,\n      password = _k === void 0 ? DEFAULT_ICONS.password : _k,\n      _l = _a.radio,\n      radio = _l === void 0 ? DEFAULT_ICONS.radio : _l,\n      _m = _a.selected,\n      selected = _m === void 0 ? DEFAULT_ICONS.selected : _m,\n      _o = _a.sort,\n      sort = _o === void 0 ? DEFAULT_ICONS.sort : _o,\n      _p = _a.upload,\n      upload = _p === void 0 ? DEFAULT_ICONS.upload : _p;\n  var value = useMemo(function () {\n    return {\n      back: back,\n      checkbox: checkbox,\n      dropdown: dropdown,\n      error: error,\n      expander: expander,\n      forward: forward,\n      menu: menu,\n      notification: notification,\n      password: password,\n      radio: radio,\n      selected: selected,\n      sort: sort,\n      upload: upload\n    };\n  }, [back, checkbox, dropdown, error, expander, forward, menu, notification, password, radio, selected, sort, upload]);\n  return _jsx(Provider, __assign({\n    value: value\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"sources":["../src/IconProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport { FontIcon } from \"./FontIcon\";\nvar DEFAULT_ICONS = {\n    back: _jsx(FontIcon, { children: \"keyboard_arrow_left\" }),\n    checkbox: _jsx(FontIcon, { children: \"check_box\" }),\n    upload: _jsx(FontIcon, { children: \"file_upload\" }),\n    dropdown: _jsx(FontIcon, { children: \"arrow_drop_down\" }),\n    error: _jsx(FontIcon, { children: \"error_outline\" }),\n    expander: _jsx(FontIcon, { children: \"keyboard_arrow_down\" }),\n    forward: _jsx(FontIcon, { children: \"keyboard_arrow_right\" }),\n    menu: _jsx(FontIcon, { children: \"menu\" }),\n    notification: _jsx(FontIcon, { children: \"notifications\" }),\n    password: _jsx(FontIcon, { children: \"remove_red_eye\" }),\n    radio: _jsx(FontIcon, { children: \"radio_button_checked\" }),\n    selected: _jsx(FontIcon, { children: \"check\" }),\n    sort: _jsx(FontIcon, { children: \"arrow_upward\" }),\n};\nvar context = createContext(DEFAULT_ICONS);\nvar Provider = context.Provider;\n/**\n * Gets one of the configured icons from the `IconProvider`. This is probably\n * just for use within `react-md`, but might be helpful outside if you want to\n * reuse the existing icon configuration for other custom components.\n *\n * If te second argument is provided and it is not `undefined`, that value will\n * be used instead of the inherited icon type.\n *\n * @param name - The name of the icon you want to use.\n * @param override - An optional override to use instead of the inherited icon.\n * @returns The overridden icon value or the inherited icon.\n */\nexport function useIcon(name, override) {\n    var icons = useContext(context);\n    if (typeof override !== \"undefined\") {\n        return override;\n    }\n    return icons[name];\n}\n/**\n * The `IconProvider` component is used to override all the default icons within\n * `react-md` with a newly defined set of icons. This is super nice since you\n * won't need to create new component wrappers for all the components within\n * `react-md` if you want to switch to SVG icons instead of the default font\n * icons.\n */\nexport function IconProvider(_a) {\n    var children = _a.children, _b = _a.back, back = _b === void 0 ? DEFAULT_ICONS.back : _b, _c = _a.checkbox, checkbox = _c === void 0 ? DEFAULT_ICONS.checkbox : _c, _d = _a.dropdown, dropdown = _d === void 0 ? DEFAULT_ICONS.dropdown : _d, _e = _a.expander, expander = _e === void 0 ? DEFAULT_ICONS.expander : _e, _f = _a.error, error = _f === void 0 ? DEFAULT_ICONS.error : _f, _g = _a.forward, forward = _g === void 0 ? DEFAULT_ICONS.forward : _g, _h = _a.menu, menu = _h === void 0 ? DEFAULT_ICONS.menu : _h, _j = _a.notification, notification = _j === void 0 ? DEFAULT_ICONS.notification : _j, _k = _a.password, password = _k === void 0 ? DEFAULT_ICONS.password : _k, _l = _a.radio, radio = _l === void 0 ? DEFAULT_ICONS.radio : _l, _m = _a.selected, selected = _m === void 0 ? DEFAULT_ICONS.selected : _m, _o = _a.sort, sort = _o === void 0 ? DEFAULT_ICONS.sort : _o, _p = _a.upload, upload = _p === void 0 ? DEFAULT_ICONS.upload : _p;\n    var value = useMemo(function () { return ({\n        back: back,\n        checkbox: checkbox,\n        dropdown: dropdown,\n        error: error,\n        expander: expander,\n        forward: forward,\n        menu: menu,\n        notification: notification,\n        password: password,\n        radio: radio,\n        selected: selected,\n        sort: sort,\n        upload: upload,\n    }); }, [\n        back,\n        checkbox,\n        dropdown,\n        error,\n        expander,\n        forward,\n        menu,\n        notification,\n        password,\n        radio,\n        selected,\n        sort,\n        upload,\n    ]);\n    return _jsx(Provider, __assign({ value: value }, { children: children }));\n}\n//# sourceMappingURL=IconProvider.js.map"]},"metadata":{},"sourceType":"module"}