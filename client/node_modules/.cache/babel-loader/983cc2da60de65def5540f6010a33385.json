{"ast":null,"code":"var _jsxFileName = \"D:\\\\boilerplate-mern-stack-master\\\\client\\\\src\\\\components\\\\views\\\\VideoDetailPage\\\\Section\\\\Subscribe.js\";\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\n\nfunction Subscribe(props) {\n  const [SubscribeNumber, setSubscribeNumber] = useState(0);\n  const [Subscribed, setSubscribed] = useState(false);\n  useEffect(() => {\n    let variable = {\n      userTo: props.userTo\n    };\n    Axios.post('/api/subscribe/subscribeNumber', variable).then(response => {\n      if (response.data.success) {\n        setSubscribeNumber(response.data.subscribeNumber);\n      } else {\n        alert('구독자 수를 받아오지 못했습니다.');\n      }\n    });\n    let subvariable = {\n      userTo: props.userTo,\n      userFrom: localStorage.getItem('userId')\n    };\n    Axios.post('/api/subscribe/subscribed', subvariable).then(response => {\n      if (response.data.success) {\n        setSubscribed(response.data.subscribed);\n      } else {\n        alert('정보를 받아오지 못했습니다.');\n      }\n    });\n  }, []);\n\n  const onSubscribe = () => {\n    let subscribeVariable = {\n      userTo: userTo,\n      userFrom: userFrom\n    };\n\n    if (Subscribed) {\n      //이미 구독중이라면\n      Axios.post('/api/subscribe/unSubscribe', subscribeVariable).then(response => {\n        if (response.data.success) {\n          setSubscribeNumber(SubscribeNumber - 1);\n          setSubscribed(!Subscribed);\n        } else {\n          alert('구독 취소를 실패했습니다.');\n        }\n      });\n    } else {\n      //아직 구독중이 아니라면\n      Axios.post('/api/subscribe/subscribe', subscribeVariable).then(response => {\n        if (response.data.success) {\n          setSubscribeNumber(SubscribeNumber + 1);\n          setSubscribed(!Subscribed);\n        } else {\n          alert('구독 신청에 실패했습니다.');\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: `${Subscribed ? '#AAAAAA' : '#CC0000'}`,\n      borderRadius: '4px',\n      color: 'white',\n      padding: '8px 16px',\n      fontWeight: '500',\n      fontSize: '1rem',\n      textTransform: 'uppercase',\n      border: 'none'\n    },\n    onClick: onSubscribe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, SubscribeNumber, \" \", Subscribed ? 'Subscribed' : 'Subscribe'));\n}\n\nexport default Subscribe;","map":{"version":3,"sources":["D:/boilerplate-mern-stack-master/client/src/components/views/VideoDetailPage/Section/Subscribe.js"],"names":["Axios","React","useEffect","useState","Subscribe","props","SubscribeNumber","setSubscribeNumber","Subscribed","setSubscribed","variable","userTo","post","then","response","data","success","subscribeNumber","alert","subvariable","userFrom","localStorage","getItem","subscribed","onSubscribe","subscribeVariable","backgroundColor","borderRadius","color","padding","fontWeight","fontSize","textTransform","border"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nfunction Subscribe(props) {\r\n    const [SubscribeNumber, setSubscribeNumber] = useState(0)\r\n    const [Subscribed, setSubscribed] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        let variable = {userTo:props.userTo}\r\n\r\n        Axios.post('/api/subscribe/subscribeNumber', variable)\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    setSubscribeNumber(response.data.subscribeNumber);\r\n                }else{\r\n                    alert('구독자 수를 받아오지 못했습니다.')\r\n                }\r\n            })\r\n\r\n        let subvariable = {userTo:props.userTo, userFrom: localStorage.getItem('userId')}\r\n        \r\n        Axios.post('/api/subscribe/subscribed', subvariable)\r\n            .then(response=>{\r\n                if(response.data.success){\r\n                    setSubscribed(response.data.subscribed)\r\n                }else{\r\n                    alert('정보를 받아오지 못했습니다.')\r\n                }\r\n            })\r\n    },[])\r\n\r\n    const onSubscribe = () =>{\r\n        let subscribeVariable = {\r\n            userTo: userTo,\r\n            userFrom: userFrom\r\n        }\r\n        if(Subscribed){\r\n            //이미 구독중이라면\r\n            Axios.post('/api/subscribe/unSubscribe', subscribeVariable)\r\n                .then(response =>{\r\n                    if(response.data.success){\r\n                        setSubscribeNumber(SubscribeNumber - 1 )\r\n                        setSubscribed(!Subscribed)\r\n                    }else{\r\n                        alert('구독 취소를 실패했습니다.')\r\n                    }\r\n                })\r\n\r\n        }else{\r\n            //아직 구독중이 아니라면\r\n            Axios.post('/api/subscribe/subscribe', subscribeVariable)\r\n            .then(response =>{\r\n                if(response.data.success){\r\n                    setSubscribeNumber(SubscribeNumber + 1 )\r\n                    setSubscribed(!Subscribed)\r\n                }else{\r\n                    alert('구독 신청에 실패했습니다.')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                style={{backgroundColor:`${Subscribed ? '#AAAAAA'  :'#CC0000' }`, borderRadius:'4px', color:'white', padding: '8px 16px',\r\n                        fontWeight:'500', fontSize:'1rem', textTransform:'uppercase', border:'none'\r\n                }}\r\n                onClick ={onSubscribe}\r\n            >\r\n               {SubscribeNumber} {Subscribed ? 'Subscribed' : 'Subscribe'}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Subscribe;"]},"metadata":{},"sourceType":"module"}