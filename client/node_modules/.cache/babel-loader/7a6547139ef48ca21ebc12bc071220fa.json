{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\n/**\n * This hooks provides an easy way to toggle a boolean flag for React\n * components.  The main use case for this will be toggling the visibility of\n * something. All the provided actions are guaranteed to never change.\n *\n * @param defaultToggled - Boolean if the visibility should be enabled first\n * render.\n * @returns an array containing the toggled state, an enable function, a disable\n * function, a toggle function, and then a manual set toggle function.\n */\n\nexport function useToggle(defaultToggled) {\n  var _a = __read(useState(defaultToggled), 2),\n      toggled = _a[0],\n      setToggled = _a[1];\n\n  var previous = useRefCache(toggled);\n  var enable = useCallback(function () {\n    if (!previous.current) {\n      setToggled(true);\n    } // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var disable = useCallback(function () {\n    if (previous.current) {\n      setToggled(false);\n    } // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var toggle = useCallback(function () {\n    setToggled(function (prevVisible) {\n      return !prevVisible;\n    });\n  }, []);\n  return [toggled, enable, disable, toggle, setToggled];\n}","map":{"version":3,"sources":["../src/useToggle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AAEA,SAAS,WAAT,QAA4B,eAA5B;AASA;;;;;;;;;;;AAUA,OAAM,SAAU,SAAV,CACJ,cADI,EACqC;AAEnC,MAAA,EAAA,GAAA,MAAA,CAAwB,QAAQ,CAAC,cAAD,CAAhC,EAAgD,CAAhD,CAAA;AAAA,MAAC,OAAO,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,MAAU,UAAU,GAAA,EAAA,CAAA,CAAA,CAApB;;AACN,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAD,CAA5B;AAEA,MAAM,MAAM,GAAG,WAAW,CAAC,YAAA;AACzB,QAAI,CAAC,QAAQ,CAAC,OAAd,EAAuB;AACrB,MAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAHwB,CAIzB;AACA;;AACD,GANyB,EAMvB,EANuB,CAA1B;AAOA,MAAM,OAAO,GAAG,WAAW,CAAC,YAAA;AAC1B,QAAI,QAAQ,CAAC,OAAb,EAAsB;AACpB,MAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHyB,CAI1B;AACA;;AACD,GAN0B,EAMxB,EANwB,CAA3B;AAQA,MAAM,MAAM,GAAG,WAAW,CAAC,YAAA;AACzB,IAAA,UAAU,CAAC,UAAC,WAAD,EAAY;AAAK,aAAA,CAAA,WAAA;AAAY,KAA9B,CAAV;AACD,GAFyB,EAEvB,EAFuB,CAA1B;AAIA,SAAO,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,MAA3B,EAAmC,UAAnC,CAAP;AACD","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useCallback, useState } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\n/**\n * This hooks provides an easy way to toggle a boolean flag for React\n * components.  The main use case for this will be toggling the visibility of\n * something. All the provided actions are guaranteed to never change.\n *\n * @param defaultToggled - Boolean if the visibility should be enabled first\n * render.\n * @returns an array containing the toggled state, an enable function, a disable\n * function, a toggle function, and then a manual set toggle function.\n */\nexport function useToggle(defaultToggled) {\n    var _a = __read(useState(defaultToggled), 2), toggled = _a[0], setToggled = _a[1];\n    var previous = useRefCache(toggled);\n    var enable = useCallback(function () {\n        if (!previous.current) {\n            setToggled(true);\n        }\n        // disabled since useRefCache\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var disable = useCallback(function () {\n        if (previous.current) {\n            setToggled(false);\n        }\n        // disabled since useRefCache\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var toggle = useCallback(function () {\n        setToggled(function (prevVisible) { return !prevVisible; });\n    }, []);\n    return [toggled, enable, disable, toggle, setToggled];\n}\n//# sourceMappingURL=useToggle.js.map"]},"metadata":{},"sourceType":"module"}